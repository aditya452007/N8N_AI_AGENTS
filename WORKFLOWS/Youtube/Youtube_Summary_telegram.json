{
  "name": "telegram youtube summary",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://tactiq-apps-prod.tactiq.io/transcript",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"videoUrl\":\"{{ $json.chatInput }}\",\"langCode\":\"en\"}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        688,
        256
      ],
      "id": "56aaaae7-956b-461a-ae7e-ab9a7ad1a85d",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": " "
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        1120,
        256
      ],
      "id": "5b81c63a-aa0f-4bee-aeaa-529183ba637b",
      "name": "Summarize1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "captions",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        896,
        256
      ],
      "id": "c25a6f7e-3026-4dde-9c48-b78a1f662546",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "chatId": "5567562308",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1664,
        256
      ],
      "id": "5312de93-7e2a-4859-865e-63317d0c33d5",
      "name": "Send a text message",
      "webhookId": "78668729-c051-4861-b2bf-6bb1f1dcd797",
      "alwaysOutputData": false,
      "credentials": {
        "telegramApi": {
          "id": "BLAhUQxfOzvflsFi",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        480,
        256
      ],
      "id": "4bc71c72-1524-4fde-9312-c01e6403891e",
      "name": "When chat message received",
      "webhookId": "09f2baf8-0852-4db7-b2ef-a4bf7b11bd95"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.concatenated_text }}",
        "options": {
          "systemMessage": "You are an expert summarizer AI. \nYour task is to generate a clear, accurate, and engaging summary of a YouTube video transcript. \nFollow these rules strictly:\n\n1. Ignore filler words, repetitions, and irrelevant details. Focus only on the main content.\n2. Capture the **key points, arguments, and conclusions** in a structured way.\n3. If the video is educational/informational:\n   - Provide a concise overview.\n   - Highlight the most important takeaways (3â€“6 bullet points).\n4. If the video is a story/interview/podcast:\n   - Provide a short narrative summary (2â€“3 sentences).\n   - Then highlight the top insights or quotes (bullet points).\n5. Keep the summary short, crisp, and **easy to read in Telegram chat** (max 400-450 words).\n6. Do not include timestamps or irrelevant metadata.\n7. If the transcript is incomplete or unclear, mention: \"Some parts of the video may be missing in the transcript.\"\n\n\nYour goal: Deliver the most useful summary possible so the user can understand the entire video quickly without watching it.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1328,
        256
      ],
      "id": "e8f69534-31e8-4e4f-aac7-fd6455d7d639",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1264,
        464
      ],
      "id": "7a7cb551-476d-4764-a925-30271ada1dc6",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "kgRrFbLYZvSuz7kk",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1424,
        480
      ],
      "id": "83a580fa-9e04-4f63-a86a-a05f5f9d40ca",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "content": "# How to Use This n8n AI Agent Workflow\n\nThis workflow demonstrates how to build a **Telegram AI Agent** inside n8n using the **Google Gemini Chat Model** and **Simple Memory**.  \nThe agent can summarize, remember context, and perform actions like sending messages or integrating with external tools (e.g., Google Sheets, calendar events).\n\n---\n\n## âš¡ Workflow Steps\n\n1. **Trigger â€“ When Chat Message Received**\n   - The workflow starts whenever a new message is received in chat.\n   - Example: A user sends a YouTube link .\n2. **HTTP Request**\n   - Fetches additional data (e.g., video details, API responses) from an external service.\n   - You can customize this step to connect with any API.\n\n3. **Split Out**\n   - Breaks the received data (like text chunks) into smaller items.\n   - Useful for summarization or processing large inputs step by step.\n\n4. **Summarize**\n   - Uses AI to generate concise summaries of the split content.\n   - Helps reduce large input into structured knowledge for the agent.\n\n5. **AI Agent**\n   - Powered by **Google Gemini Chat Model**.\n   - Connected with **Simple Memory** for context persistence across multiple messages.\n   - Can execute tools and custom logic (e.g., fetching contacts, adding events, sending emails).\n\n6. **Send a Text Message**\n   - Replies back to the user in Telegram with the AIâ€™s response.\n   - Fully customizable output.\n\n---\n\n## ðŸ”§ Setup Instructions\n\n1. Clone this repo and import the workflow JSON into your **n8n instance**.\n2. Configure the following:\n   - **Telegram Credentials** (for bot integration).\n   - **Google Gemini API Key** (for AI responses).\n   - Any additional API keys (if you extend functionality).\n3. Deploy the workflow.\n4. Start the chat give the youtube url link  â€” the AI Agent will handle summarization, memory, and actions for you.\n\n",
        "height": 1200,
        "width": 896
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -528,
        -240
      ],
      "typeVersion": 1,
      "id": "ecadeb33-afd2-4884-80ed-786b6d544cb3",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2d28b978-5e9d-4676-a4a2-9b24aa380f06",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "58efd461ef9d72698eba5370adea41085c1a423caa33d136a0572e4eef1b6807"
  },
  "id": "SEyDI4PYRGYnZmwh",
  "tags": []
}
